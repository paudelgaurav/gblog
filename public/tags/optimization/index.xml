<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>optimization on Gaurav Writes</title><link>https://paudelgaurav.github.io/gblog/tags/optimization/</link><description>Recent content in optimization on Gaurav Writes</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 29 Jun 2022 18:19:13 +0000</lastBuildDate><atom:link href="https://paudelgaurav.github.io/gblog/tags/optimization/index.xml" rel="self" type="application/rss+xml"/><item><title>Django optimization(Database)</title><link>https://paudelgaurav.github.io/gblog/django-optimization/</link><pubDate>Wed, 29 Jun 2022 18:19:13 +0000</pubDate><guid>https://paudelgaurav.github.io/gblog/django-optimization/</guid><description>Photo by Alex Blăjan on Unsplash
The major bottleneck lies in our database portion so, we will be focusing on optimizing our database queries and lookups.
For the example purpose, I will be creating some simple E-commerce models
class Category(models.Model): name = models.CharField(max_length=150) class Product(models.Model): name = models.CharField(max_length=150) category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name=&amp;#39;products&amp;#39;) price = models.FloatField() class Order(models.Model: products = models.ManyToManyField(Product) total_price = models.FloatField() N+1 Problem:
Let’s look into the (N+1) query problem</description></item></channel></rss>