<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Gaurav Writes</title><link>https://paudelgaurav.github.io/gblog/post/</link><description>Recent content in Posts on Gaurav Writes</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Wed, 29 Jun 2022 18:19:13 +0000</lastBuildDate><atom:link href="https://paudelgaurav.github.io/gblog/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Django optimization(Database)</title><link>https://paudelgaurav.github.io/gblog/django-optimization/</link><pubDate>Wed, 29 Jun 2022 18:19:13 +0000</pubDate><guid>https://paudelgaurav.github.io/gblog/django-optimization/</guid><description>Photo by Alex Blăjan on Unsplash
The major bottleneck lies in our database portion so, we will be focusing on optimizing our database queries and lookups.
For the example purpose, I will be creating some simple E-commerce models
class Category(models.Model): name = models.CharField(max_length=150) class Product(models.Model): name = models.CharField(max_length=150) category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name=&amp;#39;products&amp;#39;) price = models.FloatField() class Order(models.Model: products = models.ManyToManyField(Product) total_price = models.FloatField() N+1 Problem:
Let’s look into the (N+1) query problem</description></item><item><title>Tracking user activity in Django(DRF)</title><link>https://paudelgaurav.github.io/gblog/log_user_activity/</link><pubDate>Tue, 28 Jun 2022 18:19:13 +0000</pubDate><guid>https://paudelgaurav.github.io/gblog/log_user_activity/</guid><description>Photo by Parker Coffman on Unsplash
Here I will be demonstrating a simple way to track API-endpoints hits in Django.
First, let’s build our ActivityLog model
from django.db import models from django.contrib.auth import get_user_model from django.contrib.contenttypes.models import ContentType from django.contrib.contenttypes.fields import GenericForeignKey User = get_user_model() CREATE, READ, UPDATE, DELETE = &amp;#34;Create&amp;#34;, &amp;#34;Read&amp;#34;, &amp;#34;Update&amp;#34;, &amp;#34;Delete&amp;#34; LOGIN, LOGOUT, LOGIN_FAILED = &amp;#34;Login&amp;#34;, &amp;#34;Logout&amp;#34;, &amp;#34;Login Failed&amp;#34; ACTION_TYPES = [ (CREATE, CREATE), (READ, READ), (UPDATE, UPDATE), (DELETE, DELETE), (LOGIN, LOGIN), (LOGOUT, LOGOUT), (LOGIN_FAILED, LOGIN_FAILED), ] SUCCESS, FAILED = &amp;#34;Success&amp;#34;, &amp;#34;Failed&amp;#34; ACTION_STATUS = [(SUCCESS, SUCCESS), (FAILED, FAILED)] class ActivityLog(models.</description></item></channel></rss>