<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ORM on Gaurav Writes</title><link>https://paudelgaurav.github.io/gblog/tags/orm/</link><description>Recent content in ORM on Gaurav Writes</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 02 Aug 2022 08:32:10 +0000</lastBuildDate><atom:link href="https://paudelgaurav.github.io/gblog/tags/orm/index.xml" rel="self" type="application/rss+xml"/><item><title>Asynchronous and Scheduled tasks in Django with django_q and Redis</title><link>https://paudelgaurav.github.io/gblog/async-with-django_q/</link><pubDate>Tue, 02 Aug 2022 08:32:10 +0000</pubDate><guid>https://paudelgaurav.github.io/gblog/async-with-django_q/</guid><description>Some long-running tasks may affect the whole experience of software, so it’s better to offload those tasks and move on to perform other tasks.
A bit about the django_q package. It is indeed one of my favorite third-party packages built for Django. Using this package, we can queue our tasks, run tasks in another cluster and even perform some scheduled cron jobs.
So let’s get started.
First, we need to install django_q:</description></item><item><title>Django optimization(Database)</title><link>https://paudelgaurav.github.io/gblog/django-optimization/</link><pubDate>Wed, 29 Jun 2022 18:19:13 +0000</pubDate><guid>https://paudelgaurav.github.io/gblog/django-optimization/</guid><description>The major bottleneck lies in our database portion so, we will be focusing on optimizing our database queries and lookups.
For the example purpose, I will be creating some simple E-commerce models
class Category(models.Model): name = models.CharField(max_length=150) class Product(models.Model): name = models.CharField(max_length=150) category = models.ForeignKey(Category, on_delete=models.CASCADE, related_name=&amp;#39;products&amp;#39;) price = models.FloatField() class Order(models.Model): products = models.ManyToManyField(Product) total_price = models.FloatField() N+1 Problem:
Let’s look into the (N+1) query problem
products = Product.</description></item></channel></rss>